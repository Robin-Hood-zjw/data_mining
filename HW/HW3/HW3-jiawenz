{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["7h-6mna7Wymg","zVHO3mLobpUS","GHJpDG_WfUgG"],"mount_file_id":"1pP7RRmp7EkklbgKDfBb_P-GltMN4dwvt","authorship_tag":"ABX9TyOtTiMYgp0ulHLk2rAvMKZh"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"j5DY3aHBbnyT","colab":{"base_uri":"https://localhost:8080/","height":139},"executionInfo":{"status":"ok","timestamp":1668318864818,"user_tz":300,"elapsed":9587,"user":{"displayName":"Jiawen Zhang (Robin)","userId":"03456407888046212080"}},"outputId":"4b823052-d6dc-4ab5-dc6a-7134cbe8b9b9"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-fc33d857-b5ba-4ad3-acef-9e86abc9e765\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-fc33d857-b5ba-4ad3-acef-9e86abc9e765\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving amazonNetwork.csv to amazonNetwork (4).csv\n","Saving reviewTest.csv to reviewTest (4).csv\n","Saving reviewTrain.csv to reviewTrain (4).csv\n"]}],"source":["import operator\n","import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","import networkx as nx\n","\n","from google.colab import files as colab_files\n","uploaded = colab_files.upload()"]},{"cell_type":"markdown","source":["\n","\n","```\n","# This is formatted as code\n","```\n","\n","**2.1 Part 1: Exploratory Social Network Analysis**\n","\n"],"metadata":{"id":"7h-6mna7Wymg"}},{"cell_type":"code","source":["amazonNetwork = pd.read_csv('amazonNetwork.csv')\n","amazonNetwork.head(3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"id":"IVt_eUDyVv7A","executionInfo":{"status":"ok","timestamp":1668318864819,"user_tz":300,"elapsed":10,"user":{"displayName":"Jiawen Zhang (Robin)","userId":"03456407888046212080"}},"outputId":"8e1a29d8-104d-45e0-d72a-9a4aadd6f52c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   FromNodeId  ToNodeId\n","0           1         2\n","1           1         4\n","2           1         5"],"text/html":["\n","  <div id=\"df-05376aa3-a889-480b-b876-d47d6aaea62f\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>FromNodeId</th>\n","      <th>ToNodeId</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>5</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-05376aa3-a889-480b-b876-d47d6aaea62f')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-05376aa3-a889-480b-b876-d47d6aaea62f button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-05376aa3-a889-480b-b876-d47d6aaea62f');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":163}]},{"cell_type":"code","source":["G_asymmetric = nx.DiGraph()\n","G = nx.from_pandas_edgelist(amazonNetwork, 'FromNodeId', 'ToNodeId')"],"metadata":{"id":"UxgfascPWz5v"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Question b. How many items are present in the network and how many co-purchases happened?"],"metadata":{"id":"QCl0TcUIaCbK"}},{"cell_type":"code","source":["# Given each node is a single item in a network, so the total number of nodes in the network is item number.\n","print('The items are present in the network is ', G.number_of_nodes())\n","# Co-purchases mean a combo purchase is what we want,so it shall be the total number of edges.\n","print('The edges are present in the network is ', G.number_of_edges())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P5Svhm1QX1Gt","executionInfo":{"status":"ok","timestamp":1668318864820,"user_tz":300,"elapsed":8,"user":{"displayName":"Jiawen Zhang (Robin)","userId":"03456407888046212080"}},"outputId":"27e9ac89-9983-45aa-906f-a7144cfc45fc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The items are present in the network is  2647\n","The edges are present in the network is  7905\n"]}]},{"cell_type":"markdown","source":["Question c. Compute the average shortest distance between the nodes in graph G. \n","\n","Explain your results briefly."],"metadata":{"id":"r8rqpqEwZsus"}},{"cell_type":"code","source":["# The average shortest path length is around 6.77, which is not relatively short distance, so it takes approximately a distance of 6.77 to conduct a co-purchase.\n","print('The average shortest path length is ', nx.average_shortest_path_length(G))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fRsK0P5DYxlc","executionInfo":{"status":"ok","timestamp":1668318877841,"user_tz":300,"elapsed":13028,"user":{"displayName":"Jiawen Zhang (Robin)","userId":"03456407888046212080"}},"outputId":"54266779-d0c5-408d-92c3-aa33fd08904a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The average shortest path length is  6.774043605604942\n"]}]},{"cell_type":"markdown","source":["Question d. Compute the transitivity and the average clustering coefficient of the network graph G. Explain your findings briefly based on the definitions of clustering coefficient and transitivity."],"metadata":{"id":"4i402w8FZKoM"}},{"cell_type":"code","source":["print('The transitivity of the graph G is ', nx.transitivity(G))\n","print('The average clustering coefficient of the graph G is ', nx.average_clustering(G))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xGtxPOeoZFBQ","executionInfo":{"status":"ok","timestamp":1668318878001,"user_tz":300,"elapsed":173,"user":{"displayName":"Jiawen Zhang (Robin)","userId":"03456407888046212080"}},"outputId":"50ed8ee4-41ba-4afa-c32b-468ddd95ac29"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The transitivity of the graph G is  0.340972969221694\n","The average clustering coefficient of the graph G is  0.5010101897019097\n"]}]},{"cell_type":"markdown","source":["Question e. Apply the PageRank algorithm to network G with damping value 0.5 and find the 10 nodes with the highest PageRank. Explain your findings briefly.\n","NetworkX document of the PageRank algorithm: https://networkx.github.io/documentation/networkx-1.10/reference/generated/networkx.algorithms.link_analysis.pagerank_alg.pagerank.html"],"metadata":{"id":"_CxIhxO6ab7N"}},{"cell_type":"code","source":["pageRanking = nx.pagerank(G, alpha=0.5)\n","sorted_PR = dict(sorted(pageRanking.items(), key=operator.itemgetter(1),reverse=True))"],"metadata":{"id":"heaCs8acao7t"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["highest_pagerank_nodes = list(sorted_PR.keys())[0:10]\n","count = 1\n","for node in highest_pagerank_nodes:\n","    print(\"{}. {}\".format(count, node))\n","    count += 1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dJTwefFHdk_m","executionInfo":{"status":"ok","timestamp":1668318878002,"user_tz":300,"elapsed":6,"user":{"displayName":"Jiawen Zhang (Robin)","userId":"03456407888046212080"}},"outputId":"0552e3e2-a239-4f7a-fbcb-7a3bc80570d1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1. 481\n","2. 8\n","3. 18\n","4. 346\n","5. 99\n","6. 33\n","7. 302\n","8. 151\n","9. 78\n","10. 11\n"]}]},{"cell_type":"markdown","source":["**2.2 Part 2: Predicting Review-Rating using Features derived from network properties**"],"metadata":{"id":"fuLg5bLufABi"}},{"cell_type":"markdown","source":["# Feature Engineering"],"metadata":{"id":"lSLipPtQqU7j"}},{"cell_type":"code","source":["from sklearn.preprocessing import LabelEncoder\n","from sklearn.metrics import mean_absolute_error\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.model_selection import train_test_split\n","\n","from sklearn.linear_model import Lasso\n","from sklearn.linear_model import Ridge\n","from sklearn.ensemble import AdaBoostRegressor\n","from sklearn.linear_model import LinearRegression\n","from sklearn.ensemble import GradientBoostingRegressor\n","\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.ensemble import RandomForestClassifier, VotingClassifier"],"metadata":{"id":"uLbwb-Cl2gSl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["reviewTrain = pd.read_csv('reviewTrain.csv')\n","reviewTest = pd.read_csv('reviewTest.csv')"],"metadata":{"id":"-pPuXw1efMHf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# check the existing null values in the data frame of the training set\n","reviewTrain.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d1Jqx0mehzRN","executionInfo":{"status":"ok","timestamp":1668319367978,"user_tz":300,"elapsed":203,"user":{"displayName":"Jiawen Zhang (Robin)","userId":"03456407888046212080"}},"outputId":"9f703ee8-1e06-4d9a-a6e5-4ad6517434ca"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["id        0\n","title     0\n","group     0\n","review    0\n","dtype: int64"]},"metadata":{},"execution_count":193}]},{"cell_type":"code","source":["# check the existing null values in the data frame of the test set\n","reviewTest.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h2ic24o-snAE","executionInfo":{"status":"ok","timestamp":1668319369382,"user_tz":300,"elapsed":143,"user":{"displayName":"Jiawen Zhang (Robin)","userId":"03456407888046212080"}},"outputId":"259312e6-7c6f-4457-9c6e-7de497b8579b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["id           0\n","title        0\n","group        0\n","review    1000\n","dtype: int64"]},"metadata":{},"execution_count":194}]},{"cell_type":"markdown","source":["> According to the below calculation, there 21 IDs in the training set of review not included in the nodes of the Amazon network.\n","\n","\n","\n"],"metadata":{"id":"zhKSWIejfN_L"}},{"cell_type":"code","source":["print('The gap between the number of the training set of reviews and the number of Amazon network is ', len(set(reviewTrain.id) - set(amazonNetwork.FromNodeId).union(set(amazonNetwork.ToNodeId))))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CB_YQ1jXc-eJ","executionInfo":{"status":"ok","timestamp":1668319370618,"user_tz":300,"elapsed":135,"user":{"displayName":"Jiawen Zhang (Robin)","userId":"03456407888046212080"}},"outputId":"8abd69f6-0e34-4fff-aca3-8f21f495d74a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The gap between the number of the training set of reviews and the number of Amazon network is  21\n"]}]},{"cell_type":"markdown","source":["> The provided data has a structure of network, so more information about network shall be under consideration.\n","\n"],"metadata":{"id":"vuqNjGjiv2dt"}},{"cell_type":"markdown","source":["Given the original data is associated with network-structure, its data shall be strongly connected the theory of network, such as below: \n","1.   clustering coefficient\n","2.   degree centrality\n","3.   closeness centrality\n","4.   betweenness centrality\n","\n","The mentioned significant points from network will be added into my data frame as features.\n","\n"],"metadata":{"id":"D46HdECAttw8"}},{"cell_type":"code","source":["clustering_coefficient = nx.clustering(G)\n","degree_centrality = nx.degree_centrality(G)\n","closeness_centrality = nx.closeness_centrality(G)\n","betweenness_centrality = nx.betweenness_centrality(G)"],"metadata":{"id":"ikPhFNQrdrUR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["page_rank_column = pd.DataFrame.from_dict(sorted_PR, orient='index', columns=['page_rank'])\n","clustering_column = pd.DataFrame.from_dict(clustering_coefficient, orient='index', columns=['clustering_coefficient'])\n","degree_centrality_column = pd.DataFrame.from_dict(degree_centrality, orient='index', columns=['degree_centrality'])\n","closeness_centrality_column = pd.DataFrame.from_dict(closeness_centrality, orient='index', columns=['closeness_centrality'])\n","betweenness_centrality_column = pd.DataFrame.from_dict(betweenness_centrality , orient='index', columns=['between_centrality'])"],"metadata":{"id":"di7mBoHaejfx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Given that the training set has some gap with the network used into the last problem, left merge helps me avoid the gap values.\n","reviewTrain = reviewTrain.merge(clustering_column, left_on='id', right_index=True, how='left')\n","reviewTrain = reviewTrain.merge(degree_centrality_column, left_on='id', right_index=True, how='left')\n","reviewTrain = reviewTrain.merge(closeness_centrality_column, left_on='id', right_index=True, how='left')\n","reviewTrain = reviewTrain.merge(betweenness_centrality_column, left_on='id', right_index=True, how='left')"],"metadata":{"id":"dOmMqxClfN3z"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["\n","\n","> In case any missing values influence the final, I decide to drop all the missing values.\n","\n"],"metadata":{"id":"8y243CxTvWv1"}},{"cell_type":"code","source":["reviewTrain.dropna(inplace=True)\n","groupencoder = LabelEncoder()\n","reviewTrain['group'] = groupencoder.fit_transform(reviewTrain['group'])"],"metadata":{"id":"YkZUXfp6ifhg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["reviewTrain\n","# reviewTest\n","pd.unique(reviewTrain['group'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LgGzou4db9oP","executionInfo":{"status":"ok","timestamp":1668319428239,"user_tz":300,"elapsed":35,"user":{"displayName":"Jiawen Zhang (Robin)","userId":"03456407888046212080"}},"outputId":"4bde0531-e243-479e-cf5b-343b0cc6d091"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 2, 1, 4, 3])"]},"metadata":{},"execution_count":200}]},{"cell_type":"code","source":["reviewTrain"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"AJ0j3IFG8oYk","executionInfo":{"status":"ok","timestamp":1668319428356,"user_tz":300,"elapsed":149,"user":{"displayName":"Jiawen Zhang (Robin)","userId":"03456407888046212080"}},"outputId":"9e5e3a96-36ea-4f04-cc40-b4a642985dfb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        id                                              title  group  review  \\\n","0        3   World War II Allied Fighter Planes Trading Cards      0     5.0   \n","1        5    Prayers That Avail Much for Business: Executive      0     0.0   \n","2        7                                              Batik      2     4.5   \n","3       10                             The Edward Said Reader      0     4.0   \n","4       11   Resetting the Clock : Five Anti-Aging Hormone...      0     5.0   \n","...    ...                                                ...    ...     ...   \n","1648  2635         Duckling (Jumbo Animal Shaped Board Books)      0     0.0   \n","1649  2638   Comprehensive Curriculum of Basic Skills: Gra...      0     4.5   \n","1650  2641                                   Christian Ethics      0     4.0   \n","1651  2642   Social, Emotional, and Personality Developmen...      0     5.0   \n","1652  2644   MARC/AACR2/Authority Control Tagging: Blitz C...      0     2.0   \n","\n","      clustering_coefficient  degree_centrality  closeness_centrality  \\\n","0                   0.600000           0.001890              0.171696   \n","1                   0.181818           0.004535              0.211595   \n","2                   0.166667           0.007937              0.221794   \n","3                   0.333333           0.002646              0.186653   \n","4                   0.143333           0.009448              0.191545   \n","...                      ...                ...                   ...   \n","1648                0.000000           0.001134              0.174896   \n","1649                0.400000           0.001890              0.157051   \n","1650                1.000000           0.001512              0.134322   \n","1651                0.333333           0.001134              0.154016   \n","1652                1.000000           0.001512              0.134322   \n","\n","      between_centrality  \n","0               0.000048  \n","1               0.010119  \n","2               0.027102  \n","3               0.000550  \n","4               0.020965  \n","...                  ...  \n","1648            0.003633  \n","1649            0.002762  \n","1650            0.000000  \n","1651            0.000220  \n","1652            0.000000  \n","\n","[1653 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-007d2a45-f485-46c3-877a-1d8924bf3ff2\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>title</th>\n","      <th>group</th>\n","      <th>review</th>\n","      <th>clustering_coefficient</th>\n","      <th>degree_centrality</th>\n","      <th>closeness_centrality</th>\n","      <th>between_centrality</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3</td>\n","      <td>World War II Allied Fighter Planes Trading Cards</td>\n","      <td>0</td>\n","      <td>5.0</td>\n","      <td>0.600000</td>\n","      <td>0.001890</td>\n","      <td>0.171696</td>\n","      <td>0.000048</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5</td>\n","      <td>Prayers That Avail Much for Business: Executive</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0.181818</td>\n","      <td>0.004535</td>\n","      <td>0.211595</td>\n","      <td>0.010119</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>7</td>\n","      <td>Batik</td>\n","      <td>2</td>\n","      <td>4.5</td>\n","      <td>0.166667</td>\n","      <td>0.007937</td>\n","      <td>0.221794</td>\n","      <td>0.027102</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>10</td>\n","      <td>The Edward Said Reader</td>\n","      <td>0</td>\n","      <td>4.0</td>\n","      <td>0.333333</td>\n","      <td>0.002646</td>\n","      <td>0.186653</td>\n","      <td>0.000550</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>11</td>\n","      <td>Resetting the Clock : Five Anti-Aging Hormone...</td>\n","      <td>0</td>\n","      <td>5.0</td>\n","      <td>0.143333</td>\n","      <td>0.009448</td>\n","      <td>0.191545</td>\n","      <td>0.020965</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1648</th>\n","      <td>2635</td>\n","      <td>Duckling (Jumbo Animal Shaped Board Books)</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.001134</td>\n","      <td>0.174896</td>\n","      <td>0.003633</td>\n","    </tr>\n","    <tr>\n","      <th>1649</th>\n","      <td>2638</td>\n","      <td>Comprehensive Curriculum of Basic Skills: Gra...</td>\n","      <td>0</td>\n","      <td>4.5</td>\n","      <td>0.400000</td>\n","      <td>0.001890</td>\n","      <td>0.157051</td>\n","      <td>0.002762</td>\n","    </tr>\n","    <tr>\n","      <th>1650</th>\n","      <td>2641</td>\n","      <td>Christian Ethics</td>\n","      <td>0</td>\n","      <td>4.0</td>\n","      <td>1.000000</td>\n","      <td>0.001512</td>\n","      <td>0.134322</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1651</th>\n","      <td>2642</td>\n","      <td>Social, Emotional, and Personality Developmen...</td>\n","      <td>0</td>\n","      <td>5.0</td>\n","      <td>0.333333</td>\n","      <td>0.001134</td>\n","      <td>0.154016</td>\n","      <td>0.000220</td>\n","    </tr>\n","    <tr>\n","      <th>1652</th>\n","      <td>2644</td>\n","      <td>MARC/AACR2/Authority Control Tagging: Blitz C...</td>\n","      <td>0</td>\n","      <td>2.0</td>\n","      <td>1.000000</td>\n","      <td>0.001512</td>\n","      <td>0.134322</td>\n","      <td>0.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1653 rows × 8 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-007d2a45-f485-46c3-877a-1d8924bf3ff2')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-007d2a45-f485-46c3-877a-1d8924bf3ff2 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-007d2a45-f485-46c3-877a-1d8924bf3ff2');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":201}]},{"cell_type":"markdown","source":["Based on the pairwise correlation computing of the training set, it seems that the column group, page_rank, clustering, degree_centrality, closeness_centrality indicate fine correlation results."],"metadata":{"id":"iXPPMM_U8RL8"}},{"cell_type":"code","source":["train_corrleation = reviewTrain.corr()\n","train_corrleation.head(3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"id":"ioBJtBxt7cB-","executionInfo":{"status":"ok","timestamp":1668319428357,"user_tz":300,"elapsed":6,"user":{"displayName":"Jiawen Zhang (Robin)","userId":"03456407888046212080"}},"outputId":"0b55ca3a-dbbd-4c8d-c46d-c1d2fe2e55c7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["              id     group    review  clustering_coefficient  \\\n","id      1.000000 -0.003071  0.033189                0.169499   \n","group  -0.003071  1.000000  0.140767               -0.015582   \n","review  0.033189  0.140767  1.000000                0.020004   \n","\n","        degree_centrality  closeness_centrality  between_centrality  \n","id              -0.469197             -0.465198           -0.247056  \n","group           -0.010844             -0.004339           -0.016710  \n","review          -0.017131              0.000473           -0.003481  "],"text/html":["\n","  <div id=\"df-9232e2d5-5c15-464d-ad43-e4022495635c\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>group</th>\n","      <th>review</th>\n","      <th>clustering_coefficient</th>\n","      <th>degree_centrality</th>\n","      <th>closeness_centrality</th>\n","      <th>between_centrality</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>id</th>\n","      <td>1.000000</td>\n","      <td>-0.003071</td>\n","      <td>0.033189</td>\n","      <td>0.169499</td>\n","      <td>-0.469197</td>\n","      <td>-0.465198</td>\n","      <td>-0.247056</td>\n","    </tr>\n","    <tr>\n","      <th>group</th>\n","      <td>-0.003071</td>\n","      <td>1.000000</td>\n","      <td>0.140767</td>\n","      <td>-0.015582</td>\n","      <td>-0.010844</td>\n","      <td>-0.004339</td>\n","      <td>-0.016710</td>\n","    </tr>\n","    <tr>\n","      <th>review</th>\n","      <td>0.033189</td>\n","      <td>0.140767</td>\n","      <td>1.000000</td>\n","      <td>0.020004</td>\n","      <td>-0.017131</td>\n","      <td>0.000473</td>\n","      <td>-0.003481</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9232e2d5-5c15-464d-ad43-e4022495635c')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-9232e2d5-5c15-464d-ad43-e4022495635c button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-9232e2d5-5c15-464d-ad43-e4022495635c');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":202}]},{"cell_type":"markdown","source":["Given that there are five distinct groups for all the reviews, this might be helpful in the following machine learning."],"metadata":{"id":"UdRym1Gndj9R"}},{"cell_type":"code","source":["X_train = reviewTrain.drop(['review', 'title', 'between_centrality'], axis=1)\n","\n","# encode review ratings, and this is the target\n","reviewencoder = LabelEncoder()\n","y_train = reviewencoder.fit_transform(reviewTrain['review'])"],"metadata":{"id":"CBMTQiKPn9dY"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Regression Experiments\n","\n","> It entails linear regression, Ridge Regression and Lasso Regression.\n","\n"],"metadata":{"id":"zVHO3mLobpUS"}},{"cell_type":"code","source":["regression_models_package = [\n","    (\"Linear Regression\", LinearRegression()),\n","    (\"Lasso Regression\", Lasso(alpha = 0.1)),\n","    (\"Ridge Regression\", Ridge(alpha = 0.1)),\n","    ('Ada Boosting', AdaBoostRegressor()),\n","    ('Gradient Boosting', GradientBoostingRegressor())\n","]\n","\n","grid_param = [\n","    # Linear Regression\n","    [{\n","      'fit_intercept': [True, False],\n","      'copy_X': [True, False],\n","      'n_jobs': [0, 1, 2, 3],\n","      'positive': [True, False],\n","    }], \n","    # Lasso Regression\n","    [{\n","      'alpha': [0.0001, 0.001, 0.01, 0.1],\n","      'fit_intercept': [True, False],\n","      'positive': [True, False],\n","      'selection': ['cyclic', 'random']\n","    }], \n","    # Ridge Regression\n","    [{\n","      'alpha': [0.0001, 0.001, 0.01, 0.1],\n","      'fit_intercept': [True, False],\n","      'positive': [True, False],\n","      'selection': ['auto', 'svd', 'cholesky', 'lsqr', 'sparse_cg', 'sag', 'saga', 'lbfgs']\n","    }],\n","    # Ada Boosting Regression\n","    [{\n","      'n_estimators': [1, 2, 3, 4, 5],\n","      'learning_rate': [0.01, 0.1, 1],\n","      'loss': ['linear', 'square', 'exponential']\n","    }],\n","    # Gradient Boosting Regression\n","    [{\n","      'n_estimators': [1, 2, 3, 4, 5],\n","      'learning_rate': [0.01, 0.1, 1],\n","      'loss': ['log_loss', 'deviance', 'exponential'],\n","      'max_depth': [1, 2, 3, 4, 5],\n","      'max_features': ['auto', 'sqrt', 'log2']\n","    }],\n","]"],"metadata":{"id":"gbB_tfFQbsJO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for choice, param in zip(regression_models_package, grid_param):  \n","    best_search = GridSearchCV(estimator=choice[1], param_grid=param, cv=5, scoring='neg_mean_absolute_error')\n","    best_search.fit(X_train_scaled, y_train)\n","\n","    best_param = best_search.best_params_\n","    print('The best parameter for {} is {}.'.format(choice[1].__class__.__name__, best_param))\n","    choice[1].set_params(**best_param)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":381},"id":"IQTEQWYjpEV-","executionInfo":{"status":"error","timestamp":1668318960523,"user_tz":300,"elapsed":151,"user":{"displayName":"Jiawen Zhang (Robin)","userId":"03456407888046212080"}},"outputId":"2416d4d4-e542-463e-ad4a-ed512e26f249"},"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-185-2e91b47a9593>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mchoice\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparam\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mregression_models_package\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrid_param\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0mbest_search\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGridSearchCV\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mchoice\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparam_grid\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparam\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscoring\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'neg_mean_absolute_error'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m     \u001b[0mbest_search\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train_scaled\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mbest_param\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbest_search\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbest_params_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    797\u001b[0m             \u001b[0mrefit_metric\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrefit\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    798\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 799\u001b[0;31m         \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgroups\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindexable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgroups\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    800\u001b[0m         \u001b[0mfit_params\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_check_fit_params\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    801\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mindexable\u001b[0;34m(*iterables)\u001b[0m\n\u001b[1;32m    376\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    377\u001b[0m     \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0m_make_indexable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mX\u001b[0m \u001b[0;32min\u001b[0m \u001b[0miterables\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 378\u001b[0;31m     \u001b[0mcheck_consistent_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    379\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    380\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_consistent_length\u001b[0;34m(*arrays)\u001b[0m\n\u001b[1;32m    327\u001b[0m     \"\"\"\n\u001b[1;32m    328\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 329\u001b[0;31m     \u001b[0mlengths\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0m_num_samples\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mX\u001b[0m \u001b[0;32min\u001b[0m \u001b[0marrays\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mX\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    330\u001b[0m     \u001b[0muniques\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlengths\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    331\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muniques\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    327\u001b[0m     \"\"\"\n\u001b[1;32m    328\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 329\u001b[0;31m     \u001b[0mlengths\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0m_num_samples\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mX\u001b[0m \u001b[0;32min\u001b[0m \u001b[0marrays\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mX\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    330\u001b[0m     \u001b[0muniques\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlengths\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    331\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muniques\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36m_num_samples\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m    268\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    269\u001b[0m             raise TypeError(\n\u001b[0;32m--> 270\u001b[0;31m                 \u001b[0;34m\"Singleton array %r cannot be considered a valid collection.\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    271\u001b[0m             )\n\u001b[1;32m    272\u001b[0m         \u001b[0;31m# Check that shape is returning an integer or default to len\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: Singleton array array(StandardScaler(), dtype=object) cannot be considered a valid collection."]}]},{"cell_type":"markdown","source":["# Classification Experiments\n","\n","\n","> It entails K-NN Classification, Logistic Regression and Random Forest Classification.\n","\n"],"metadata":{"id":"Asb-t36mbhM4"}},{"cell_type":"code","source":["models_package = [\n","    (\"KNN\", KNeighborsClassifier()),\n","    (\"Logistic Regression\",  LogisticRegression()),\n","    (\"Random Forest\", RandomForestClassifier())\n","  ]\n","\n","grid_param = [\n","    # KNeighbors Classifier\n","    [{\n","        'n_neighbors': [1, 2, 3, 4, 5],\n","        'weights': ['uniform', 'distance'],\n","        'algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute']\n","    }],\n","    # Logistic Regression\n","    [{\n","        'penalty': ['l1', 'l2', 'elasticnet', 'none'],\n","        'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'],\n","        'multi_class': ['auto', 'ovr', 'multinomial']\n","    }],\n","    # Random Forest Classifier\n","    [{\n","        'n_estimators': [1, 2, 3, 4, 5],\n","        'criterion': ['gini', 'entropy', 'log_loss'],\n","        'max_features': ['sqrt', 'log2', None],\n","        'class_weight': ['balanced', 'balanced_subsample']\n","    }]\n","]"],"metadata":{"id":"us1lU0dThmGl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for model, parameter in zip(models_package, grid_param):\n","  search_mode = GridSearchCV(estimator=model[1], param_grid=parameter, scoring='neg_mean_absolute_error')\n","  search_mode.fit(X_train, y_train)\n","  best_parameters = search_mode.best_params_\n","  model[1].set_params(**best_parameters)"],"metadata":{"id":"1GpPT_tPpcvo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["hard_vote_test = VotingClassifier(estimators=models_package, voting='hard')\n","hard_vote_test.fit(X_train, y_train)\n","MAE_hard_test = mean_absolute_error(y_train, hard_vote_test.predict(X_train))\n","print(\"Training MAE by hard voting: %0.2f\" % (MAE_hard_test))\n","\n","soft_vote_test = VotingClassifier(estimators=models_package, voting='soft')\n","soft_vote_test.fit(X_train, y_train)\n","MAE_soft_test = mean_absolute_error(y_train, soft_vote_test.predict(X_train))\n","print(\"Training MAE by soft voting: %0.2f\" % (MAE_soft_test))"],"metadata":{"id":"f0uJ7LOfmZbt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["reviewTest = reviewTest.merge(page_rank_column, left_on='id', right_index=True, how='left')\n","reviewTest = reviewTest.merge(clustering_column, left_on='id', right_index=True, how='left')\n","reviewTest = reviewTest.merge(degree_centrality_column, left_on='id', right_index=True, how='left')\n","reviewTest = reviewTest.merge(closeness_centrality_column, left_on='id', right_index=True, how='left')\n","\n","reviewTest.fillna(0, inplace=True)  # fill in missing values with 0\n","reviewTest['group'] = groupencoder.transform(reviewTest['group'])\n","reviewTest.head()"],"metadata":{"id":"VQZHvKlQV1dP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# reviewTest['review'] = reviewencoder.inverse_transform(soft_vote_test.predict(reviewTest.drop(['review', 'title'], axis=1)))\n","# reviewTest['group'] = groupencoder.inverse_transform(reviewTest['group'])\n","# reviewTest.head()\n","reviewTest['review'] = reviewencoder.inverse_transform(hard_vote_test.predict(\n","    reviewTest.drop(['review', 'title'], axis=1)))\n","reviewTest['group'] = groupencoder.inverse_transform(reviewTest['group'])\n","reviewTest.head()"],"metadata":{"id":"0kiU8sQGXW3w"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["reviewTest[['id', 'title', 'group', 'review']].to_csv('reviewTestResult.csv', index=False)"],"metadata":{"id":"pbG1Y7igXqBU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# classifiers = [\n","#     (\"KNN\", KNeighborsClassifier()), \n","#     (\"Gaussian Process\", GaussianProcessClassifier()),\n","#     (\"Decision Tree\", DecisionTreeClassifier()),\n","#     (\"Random Forest\", RandomForestClassifier()), \n","#     (\"Multi-layer Perceptron\", MLPClassifier())\n","# ]\n","\n","# grid_neighbours = [1, 2, 3, 4, 5, 6, 7]\n","# grid_criterion = ['gini', 'entropy']\n","# grid_max_depth = [2, 4, 6, 8, 10, None]\n","# seed = [42]\n","# grid_n_estimator = [5, 10, 15, 20, 25, 30, 40, 50, 100]\n","# grid_alpha = [0.0001, 0.001, 0.01, 1, 10]"],"metadata":{"id":"bzPYIaamQ-zo"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Part 4: Peer-assessed Exam question generation**"],"metadata":{"id":"GHJpDG_WfUgG"}},{"cell_type":"code","source":[],"metadata":{"id":"Amkhn_yzfZRt"},"execution_count":null,"outputs":[]}]}